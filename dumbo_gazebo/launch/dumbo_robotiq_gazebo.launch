<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <param name="/use_sim_time" value="$(arg use_sim_time)" />

  <rosparam command="load" file="$(find dumbo_gazebo)/config/dumbo_gazebo_controller_config.yaml" />

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find dumbo_gazebo)/worlds/dumbo.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <include file="$(find dumbo_description)/robots/upload_dumbo_robotiq.launch" />

  <!-- start robot_state_publisher -->
  <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher" >
    <param name="publish_frequency" type="double" value="150" />    
  </node>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model dumbo -param robot_description"/>

  <!-- load Dumbo default controllers -->
  <include file="$(find dumbo_controller_config)/launch/dumbo_default_controllers.launch" />

  <!-- Moveit -->
  <include file="$(find dumbo_moveit_config)/launch/move_group.launch"/> 

  <node name="robotiq_dummy_joint_state_publisher" pkg="robotiq_s_model_joint_state_publisher" type="robotiq_dummy_joint_state_publisher" cwd="node" respawn="false" output="screen" />


</launch>